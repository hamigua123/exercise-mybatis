<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 命名空间,用于隔离sql语句  
    #{ }:点位符,相当于jdbc的? 
    ${ }:字符串拼接指令,如果入参是普通数据类型,{}只能写value -->
<mapper namespace="user">
    <!-- id: sql  id,语句的唯一标识
         parameterType: 入参的数据类型
         resultType: 返回结果的数据类型
     -->
     
    <!-- 查询  -->
    <select id="getUserById" parameterType="int" resultType="com.hmg.mybatis.pojo.User">
    SELECT * FROM `user` WHERE id = #{id}
    </select>
    
    <!-- ResultType 如果返回值是List类型 只需设置成每一个的数据类型 -->
    
    <select id="getUserByUserName" parameterType="String" resultType="com.hmg.mybatis.pojo.User">
       <!--  SELECT * FROM `user` WHERE username LIKE #{name} -->
        SELECT * FROM `user` WHERE username LIKE '%${value}%'
    </select>
    
    <!-- 插入用户 -->
    <!-- useGeneratedKeys="true":使用自增, keyProperty="i d"配套使用(user的主键)
                或 者
                添加 SELECT LAST_INSERT_ID()
    -->
    <insert id="insertUser" parameterType="com.hmg.mybatis.pojo.User" useGeneratedKeys="true"  keyProperty="id">
        <!-- selectKey 主键返回
             keyProperty:user中的主键属性
             resultType:主键数据类型
             order:指定selectKey执行时间(BEFORE或AFTER)
         -->
       <!--  <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey> -->
        INSERT INTO `user` (`username`, `birthday`, `sex`, `address`) VALUES ( #{ username },  #{ birthday },  #{ sex },  #{ address });
    </insert>
    
    <insert id="insertUserUUID" parameterType="com.hmg.mybatis.pojo.User" useGeneratedKeys="true"  keyProperty="id">
        <selectKey keyProperty="uuid2" resultType="String" order="BEFORE">
            SELECT UUID()
        </selectKey>
    INSERT INTO `user` (`id`, `username`, `birthday`, `sex`, `address`, `uuid2`) VALUES ( #{ username },  #{ birthday },  #{ sex },  #{ address },#{ uuid2 });
    </insert>
    
    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.hmg.mybatis.pojo.User">
        UPDATE `user` SET, `username`= #{ username } WHERE (`id`=#{ id });
    </update>
    
    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM `user` WHERE `id` = #{ id };
    </delete>
    
</mapper>